const INPUT_PIN_MODES=["analog","input","input_pullup","input_pulldown","auto"];class ClassPortSensor extends ClassSensor{constructor(opts){if(ClassSensor.call(this,opts),"object"==typeof opts.pinModes)for(let i=0;i<this._QuantityChannel;i++)this.Configure(i,{mode:opts.pinModes[i]})}Start(_chNum,_period,_opts){let opts=_opts||{},curr_mode=this._Pins[_chNum].getMode();if(!INPUT_PIN_MODES.includes(curr_mode)&&!opts.force)return!1;this._ChStatus[_chNum]=1,this._Interval=setInterval(()=>{this._ChStatus.forEach((status,i)=>{1===status&&(this[`Ch${i}_Value`]=this.Read(this._Pins[i]))})},_period)}Stop(_chNum){if("number"!=typeof this._ChStatus[_chNum])return!1;this._ChStatus[_chNum]=0,this._ChStatus.find(s=>0!==s)||clearInterval(this._Interval)}Read(port){return"analog"==this._TypeInSignal?analogRead(port):digitalRead(port)}Configure(_chNum,_opts){return!!INPUT_PIN_MODES.includes(_opts.mode)&&(this._Pins[_chNum].mode(_opts.mode),!0)}GetInfo(_chNum){return Object.assign({mode:this._Pins[_chNum].getMode()},this._Pins[_chNum].getInfo())}}exports=ClassPortSensor;